// Copyright 2021 Keyfactor
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using CSS.PKI.PrivateKeys;
using Keyfactor.AnyAgent.AviVantage;
using Keyfactor.AnyAgent.AviVantage.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text.RegularExpressions;
using Constants = Keyfactor.AnyAgent.AviVantage.Models.Constants;

namespace Console
{
    class Program
    {
        static void Main(string[] args)
        {
            string url = "https://40.76.215.44"; // HTTPS is required to Auth correctly. Redirect does not handle appropriately
            string username = "admin";
            string password = "Cheese22";
            AviVantageClient client = new AviVantageClient(url, username, password);

            // test get all certs
            List<SSLKeyAndCertificate> certs = client.GetAllCertificates(Constants.SSLCertificate.Type.VIRTUAL_SERVICE).Result;

            int count = certs.Count;
            SSLKeyAndCertificate first = certs.FirstOrDefault();

            // test getting a cert by name
            string name = "rsaCng-nochain";
            SSLKeyAndCertificate foundCert = client.GetCertificateByName(name).Result;


            // test deleting a cert
            //string uuidToDelete = found.uuid;
            //bool done = client.DeleteCertificate(uuidToDelete).Result;

            // test adding a cert
            string certToAdd = @"-----BEGIN CERTIFICATE-----
MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC
VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50
cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs
IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz
dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy
NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu
dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt
dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0
aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj
YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T
RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN
cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW
wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1
U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0
jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP
BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN
BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/
jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ
Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v
1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R
nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH
VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==
-----END CERTIFICATE-----"; // entrust_g2_ca
            certToAdd = Regex.Replace(certToAdd, "\r", "");

            // testing for cert contents that come from job
            string certContents = "MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcyNTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/TRU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWNcCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hWwcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzANBgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZRkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4RnAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmHVHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==";
            certContents = $"-----BEGIN CERTIFICATE-----\n{certContents}\n-----END CERTIFICATE-----";

            // test cert with pkey
            string certAndKeyContents = "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";
            // ec key type cert
            certAndKeyContents = "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";

            byte[] certBytes = Convert.FromBase64String(certAndKeyContents);
            X509Certificate2 x509 = new X509Certificate2(certBytes, "Cheese22");
            PrivateKeyConverter p = PrivateKeyConverterFactory.FromPKCS12(certBytes, "Cheese22");

            certContents = $"-----BEGIN CERTIFICATE-----\n{Convert.ToBase64String(x509.RawData)}\n-----END CERTIFICATE-----";
            string keyContents = $"-----BEGIN EC PRIVATE KEY-----\n{Convert.ToBase64String(p.ToPkcs8BlobUnencrypted())}\n-----END EC PRIVATE KEY-----";

            // might be worth checking if PEMUtilities / PemWriter from BC will auto-handle writing pem (with key type)

            SSLKeyAndCertificate aviCert = new SSLKeyAndCertificate()
            {
                certificate = new SSLCertificate()
                {
                    certificate = certContents
                },
                certificate_base64 = false,
                format = Constants.SSLCertificate.Format.PEM, // chnge to p12 with privkey?
                key = keyContents,
                key_base64 = false,
                key_passphrase = "Cheese22",
                name = "my-pfx-3", // job param? ALIAS instead?
                status = Constants.SSLCertificate.Status.FINISHED,
                type = Constants.SSLCertificate.Type.SYSTEM // needs to be a job param
            };

            SSLKeyAndCertificate returnedCert = client.AddCertificate(aviCert).Result;
            string newUUID = returnedCert.uuid;

            // try overwriting existing certificate
            SSLKeyAndCertificate updatedCert = client.UpdateCertificate(foundCert.uuid, aviCert).Result;
            string newName = updatedCert.name;
        }
    }
}
